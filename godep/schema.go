// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package godep

import "time"

// The response that contains the details for an account.
type AccountDetailJson struct {
	// The Apple Account of the person who generated the currently in-use tokens.
	AdminId *string `json:"admin_id,omitempty"`

	// The legacy equivalent to the admin_id key. This key is deprecated and may not
	// be returned in future responses.
	FacilitatorId *string `json:"facilitator_id,omitempty"`

	// The organization address.
	OrgAddress *string `json:"org_address,omitempty"`

	// The organization email address.
	OrgEmail *string `json:"org_email,omitempty"`

	// The customer ID. This key is available only in protocol version 3 and later.
	OrgId *string `json:"org_id,omitempty"`

	// The SHA hash of an organization identifier. This helps Mobile Device Management
	// (MDM) server match the hash with the organizationIdHash key in the Client
	// Configuration API. This key is available only in protocol version 3 and later.
	OrgIdHash *string `json:"org_id_hash,omitempty"`

	// The organization name.
	OrgName *string `json:"org_name,omitempty"`

	// The organization phone.
	OrgPhone *string `json:"org_phone,omitempty"`

	// The type of organization. Possible values are edu or org. This key is available
	// only in protocol version 3 and later.
	OrgType *AccountDetailJsonOrgType `json:"org_type,omitempty"`

	// Possible values: v1 or v2. v1 is for Apple Deployment Programs (like Device
	// Enrollment Program or Volume Purchase Program) organizations and v2 is for
	// Apple School Manager (ASM) organizations. Currently v2 is applicable only to
	// educational organizations. This key is available only in protocol version 3 and
	// later.
	OrgVersion *AccountDetailJsonOrgVersion `json:"org_version,omitempty"`

	// The name of the MDM server.
	ServerName *string `json:"server_name,omitempty"`

	// The system-generated server identifier.
	ServerUuid *string `json:"server_uuid,omitempty"`

	// The list of URLs available in the MDM service. This key is valid in
	// X-Server-Protocol-Version 3 and later.
	Urls []UrlJson `json:"urls,omitempty"`
}

type AccountDetailJsonOrgType string

const AccountDetailJsonOrgTypeEdu AccountDetailJsonOrgType = "edu"
const AccountDetailJsonOrgTypeOrg AccountDetailJsonOrgType = "org"
const AccountDetailJsonOrgTypeTvprovider AccountDetailJsonOrgType = "tvprovider"

type AccountDetailJsonOrgVersion string

const AccountDetailJsonOrgVersionV1 AccountDetailJsonOrgVersion = "v1"
const AccountDetailJsonOrgVersionV2 AccountDetailJsonOrgVersion = "v2"

// The details for an account-driven enrollment profile.
type AccountDrivenEnrollmentProfileRequestJson struct {
	// The MDM Service Discovery URL that the system redirects the user to during
	// account-driven enrollment.
	MdmServiceDiscoveryUrl string `json:"mdm_service_discovery_url"`
}

// Request enabling activation lock for a device.
type ActivationLockRequestJson struct {
	// Serial number of the device (required).
	Device string `json:"device"`

	// Escrow key (optional). If the escrow key is not provided, the device will be
	// locked to the person who created the MDM server in the portal. For information
	// about creating an escrow key see [Creating and Using Bypass
	// Codes](https://developer.apple.com/documentation/devicemanagement/creating-and-using-bypass-codes).
	EscrowKey *string `json:"escrow_key,omitempty"`

	// Lost message to be displayed on the device (optional).
	LostMessage *string `json:"lost_message,omitempty"`
}

type ActivationLockStatusResponseJson struct {
	// SUCCESS or one of the failure responses listed below.
	ResponseStatus string `json:"response_status"`

	// Serial number of the device.
	SerialNumber string `json:"serial_number"`
}

type AssignProfileResponseJson struct {
	// Devices corresponds to the JSON schema field "devices".
	Devices map[string]AssignProfileResponseJsonDevicesValue `json:"devices,omitempty"`

	// ProfileUuid corresponds to the JSON schema field "profile_uuid".
	ProfileUuid *string `json:"profile_uuid,omitempty"`
}

type AssignProfileResponseJsonDevicesValue string

const AssignProfileResponseJsonDevicesValueFAILED AssignProfileResponseJsonDevicesValue = "FAILED"
const AssignProfileResponseJsonDevicesValueNOTACCESSIBLE AssignProfileResponseJsonDevicesValue = "NOT_ACCESSIBLE"
const AssignProfileResponseJsonDevicesValueSUCCESS AssignProfileResponseJsonDevicesValue = "SUCCESS"

// The request used to remove a profile from devices.
type ClearProfileRequestJson struct {
	// An array of strings containing device serial numbers.
	Devices []string `json:"devices,omitempty"`

	// The unique identifier for a profile.
	ProfileUuid *string `json:"profile_uuid,omitempty"`
}

type ClearProfileResponseJson struct {
	// Devices corresponds to the JSON schema field "devices".
	Devices map[string]ClearProfileResponseJsonDevicesValue `json:"devices,omitempty"`
}

type ClearProfileResponseJsonDevicesValue string

const ClearProfileResponseJsonDevicesValueFAILED ClearProfileResponseJsonDevicesValue = "FAILED"
const ClearProfileResponseJsonDevicesValueNOTACCESSIBLE ClearProfileResponseJsonDevicesValue = "NOT_ACCESSIBLE"
const ClearProfileResponseJsonDevicesValueSUCCESS ClearProfileResponseJsonDevicesValue = "SUCCESS"

type DefineProfileResponseJson struct {
	// Devices corresponds to the JSON schema field "devices".
	Devices map[string]DefineProfileResponseJsonDevicesValue `json:"devices,omitempty"`

	// ProfileUuid corresponds to the JSON schema field "profile_uuid".
	ProfileUuid *string `json:"profile_uuid,omitempty"`
}

type DefineProfileResponseJsonDevicesValue string

const DefineProfileResponseJsonDevicesValueFAILED DefineProfileResponseJsonDevicesValue = "FAILED"
const DefineProfileResponseJsonDevicesValueNOTACCESSIBLE DefineProfileResponseJsonDevicesValue = "NOT_ACCESSIBLE"
const DefineProfileResponseJsonDevicesValueSUCCESS DefineProfileResponseJsonDevicesValue = "SUCCESS"

// A device’s properties and their values.
type DeviceJson struct {
	// The device’s asset tag.
	AssetTag *string `json:"asset_tag,omitempty"`

	// The color of the device.
	Color *string `json:"color,omitempty"`

	// A description of the device.
	Description *string `json:"description,omitempty"`

	// The email of the person who assigned the device.
	DeviceAssignedBy *string `json:"device_assigned_by,omitempty"`

	// A time stamp in ISO 8601 format that indicates when the device was assigned to
	// the MDM server.
	DeviceAssignedDate *time.Time `json:"device_assigned_date,omitempty"`

	// The device’s Apple product family: `iPad`, `iPhone`, `iPod`, `Mac`, `AppleTV`,
	// or `Vision`. This key is valid in X-Server-Protocol-Version 2 and later.
	DeviceFamily *DeviceJsonDeviceFamily `json:"device_family,omitempty"`

	// A time stamp in ISO 8601 format that indicates the MDM migration deadline. This
	// key is valid with X-Server-Protocol-Version 8 and later.
	MdmMigrationDeadline *time.Time `json:"mdm_migration_deadline,omitempty"`

	// The model name.
	Model string `json:"model"`

	// A time stamp in ISO 8601 format that indicates when the device was added,
	// updated, or deleted. If the value of `op_type` is added, this is the same as
	// `device_assigned_date`. This field is only applicable with the [Sync the List
	// of
	// Devices](https://developer.apple.com/documentation/devicemanagement/sync-devices)
	// command.
	OpDate *time.Time `json:"op_date,omitempty"`

	// Indicates whether the device was added (assigned to the MDM server), modified,
	// or deleted. Contains one of the following strings: `added`, `modified`, or
	// `deleted`.This field is only applicable with the `sync the list of devices`
	// command.
	OpType *DeviceJsonOpType `json:"op_type,omitempty"`

	// The device’s operating system: `iOS`, `iPadOS`, `OSX`, `tvOS`, or `visionOS`.
	// This key is valid in X-Server-Protocol-Version 2 and later.
	// With X-Server-Protocol-Version 7 and later, iPad product os will return
	// `iPadOS`.
	Os *DeviceJsonOs `json:"os,omitempty"`

	// A time stamp in ISO 8601 format that indicates when a profile was assigned to
	// the device.
	ProfileAssignTime *time.Time `json:"profile_assign_time,omitempty"`

	// A time stamp in ISO 8601 format that indicates when a profile was pushed to the
	// device.
	ProfilePushTime *time.Time `json:"profile_push_time,omitempty"`

	// The status of profile installation—either `empty`, `assigned`, `pushed`, or
	// `removed`.
	ProfileStatus *DeviceJsonProfileStatus `json:"profile_status,omitempty"`

	// The unique ID of the assigned profile.
	ProfileUuid *string `json:"profile_uuid,omitempty"`

	// ResponseStatus corresponds to the JSON schema field "response_status".
	ResponseStatus *string `json:"response_status,omitempty"`

	// The device’s serial number.
	SerialNumber string `json:"serial_number"`
}

type DeviceJsonDeviceFamily string

const DeviceJsonDeviceFamilyAppleTV DeviceJsonDeviceFamily = "AppleTV"
const DeviceJsonDeviceFamilyIPad DeviceJsonDeviceFamily = "iPad"
const DeviceJsonDeviceFamilyIPhone DeviceJsonDeviceFamily = "iPhone"
const DeviceJsonDeviceFamilyIPod DeviceJsonDeviceFamily = "iPod"
const DeviceJsonDeviceFamilyMac DeviceJsonDeviceFamily = "Mac"
const DeviceJsonDeviceFamilyVision DeviceJsonDeviceFamily = "Vision"

type DeviceJsonOpType string

const DeviceJsonOpTypeAdded DeviceJsonOpType = "added"
const DeviceJsonOpTypeDeleted DeviceJsonOpType = "deleted"
const DeviceJsonOpTypeModified DeviceJsonOpType = "modified"

type DeviceJsonOs string

const DeviceJsonOsIOS DeviceJsonOs = "iOS"
const DeviceJsonOsIPadOS DeviceJsonOs = "iPadOS"
const DeviceJsonOsOSX DeviceJsonOs = "OSX"
const DeviceJsonOsTvOS DeviceJsonOs = "tvOS"
const DeviceJsonOsVisionOS DeviceJsonOs = "visionOS"

type DeviceJsonProfileStatus string

const DeviceJsonProfileStatusAssigned DeviceJsonProfileStatus = "assigned"
const DeviceJsonProfileStatusEmpty DeviceJsonProfileStatus = "empty"
const DeviceJsonProfileStatusPushed DeviceJsonProfileStatus = "pushed"
const DeviceJsonProfileStatusRemoved DeviceJsonProfileStatus = "removed"

type DeviceListRequestJson struct {
	// Devices corresponds to the JSON schema field "devices".
	Devices []string `json:"devices,omitempty"`
}

type DeviceListResponseJson struct {
	// Devices corresponds to the JSON schema field "devices".
	Devices map[string]DeviceJson `json:"devices,omitempty"`
}

type DeviceStatusResponseJson struct {
	// Devices corresponds to the JSON schema field "devices".
	Devices map[string]DeviceStatusResponseJsonDevicesValue `json:"devices,omitempty"`
}

type DeviceStatusResponseJsonDevicesValue string

const DeviceStatusResponseJsonDevicesValueFAILED DeviceStatusResponseJsonDevicesValue = "FAILED"
const DeviceStatusResponseJsonDevicesValueNOTACCESSIBLE DeviceStatusResponseJsonDevicesValue = "NOT_ACCESSIBLE"
const DeviceStatusResponseJsonDevicesValueSUCCESS DeviceStatusResponseJsonDevicesValue = "SUCCESS"

// The request for a list of devices.
type FetchDeviceRequestJson struct {
	// A hex string that represents the starting position for a request. Use this to
	// retrieve the list of devices that have been added or removed since a previous
	// request. The string can be up to 1000 characters. On the initial request, this
	// should be omitted.
	Cursor *string `json:"cursor,omitempty"`

	// The maximum number of entries to return. Optional.
	Limit int `json:"limit,omitempty"`
}

// The response that contains a list of devices.
type FetchDeviceResponseJson struct {
	// Indicates when this request was processed by the server. The MDM server can use
	// this value in future requests if it wants to retrieve only records added or
	// removed since this request.
	Cursor string `json:"cursor"`

	// An array of dictionaries that provide information about devices. The devices
	// are sorted in chronological order by the time stamp of the operation performed
	// on the device.
	Devices []DeviceJson `json:"devices,omitempty"`

	// A date stamp that indicates the progress of the device fetch request, in ISO
	// 8601 format.
	FetchedUntil time.Time `json:"fetched_until"`

	// Indicates that the request’s limit and cursor values resulted in only a partial
	// list of devices.
	// The MDM server should immediately make another request (starting from the newly
	// returned cursor) to obtain additional records.
	MoreToFollow bool `json:"more_to_follow"`
}

// Provides a list of beta enrollment tokens available for the given organization.
type GetSeedBuildTokenResponseJson struct {
	// The list of beta enrollment tokens available for the given organization.
	BetaEnrollmentTokens []SeedBuildTokenJson `json:"betaEnrollmentTokens,omitempty"`

	// SeedBuildTokens corresponds to the JSON schema field "seedBuildTokens".
	SeedBuildTokens []SeedBuildTokenJson `json:"seedBuildTokens,omitempty"`
}

// A ranged limit.
type LimitJson struct {
	// Default value of limit.
	Default *int `json:"default,omitempty"`

	// Maximum value of limit.
	Maximum *int `json:"maximum,omitempty"`
}

// A profile’s properties and their values.
type ProfileJson struct {
	// Default is `true`. In iOS 13, this property was deprecated.
	AllowPairing bool `json:"allow_pairing,omitempty"`

	// An array of strings, where each string is a DER-encoded (Distinguished Encoding
	// Rules) certificate converted to Base64 encoding. If provided, the device uses
	// these certificates as trusted anchor certificates when evaluating the trust of
	// the connection to the MDM server URL. Otherwise, the device uses the built-in
	// root certificates.
	AnchorCerts []string `json:"anchor_certs,omitempty"`

	// If set to true, the device will tell Setup Assistant to automatically advance
	// though its screens. Default is `false`.
	// This key is valid in X-Server-Protocol-Version 2 and later.
	// Available on tvOS and macOS 11 and later.
	AutoAdvanceSetup *bool `json:"auto_advance_setup,omitempty"`

	// If true, the device will not continue in Setup Assistant until the MDM server
	// sends a command that states the device is configured (see [Device
	// Configured](https://developer.apple.com/documentation/devicemanagement/device-configured-command).
	// Default is `false`. Ignored on iOS devices if `is_supervised` is `false`. This
	// key is valid in X-Server-Protocol-Version 2 and later.
	AwaitDeviceConfigured *bool `json:"await_device_configured,omitempty"`

	// The URL that the clients load into a web view during setup. This site provides
	// the appropriate UI to authenticate the user, and when satisfied, initiates the
	// download of the MDM enrollment profile.
	// To provide the MDM enrollment profile, the web view looks for a page with MIME
	// type `application/x-apple-aspen-config`.
	// While the user is allowed to navigate to any site or host during
	// authentication, the MDM enrollment profile must originate from the same host as
	// specified in this field.
	ConfigurationWebUrl *string `json:"configuration_web_url,omitempty"`

	// The user-defined department or location name.
	Department *string `json:"department,omitempty"`

	// Array of strings that contains device serial numbers (may be empty).
	Devices []string `json:"devices,omitempty"`

	// If true, the device does not use the profile when it restores a backup. Default
	// is `false`. Available in iOS 26 and later, and visionOS 26 and later; otherwise
	// ignored by devices.
	DoNotUseProfileFromBackup *bool `json:"do_not_use_profile_from_backup,omitempty"`

	// If true, the user may not skip applying the profile returned by the MDM server.
	// Default is `false`.
	// In iOS 13 and later, all DEP enrollments are mandatory.
	IsMandatory *bool `json:"is_mandatory,omitempty"`

	// If false, the MDM payload delivered by the configuration URL cannot be removed
	// by the user via the user interface on the device; that is, the MDM payload is
	// locked onto the device. This key can be set to false only if `is_supervised` is
	// set to `true`. Defaults to `true`.
	IsMdmRemovable bool `json:"is_mdm_removable"`

	// If true, tells the device to configure for Shared iPad. Default is false. This
	// key is valid only for Apple School Manager or Apple Business Manager
	// organizations using X-Server-Protocol-Version 2 and later.
	// Devices that do not meet the Shared iPad minimum requirements do not honor this
	// command. With iOS devices, `com.apple.mdm.per-user-connections` must be added
	// to the MDM enrollment profile’s Server Capabilities.
	IsMultiUser *bool `json:"is_multi_user,omitempty"`

	// If true, the device is configured for Rapid Return to Service. Default is
	// `false`. Available in iOS 26 and later, and visionOS 26 and later; otherwise
	// ignored by devices.
	IsReturnToService *bool `json:"is_return_to_service,omitempty"`

	// If true, the device must be supervised. Defaults to `false`.
	// In iOS 11, DEP devices that are not supervised have been deprecated.
	// In iOS 13, all DEP devices will be supervised and the OS will ignore the
	// `is_supervised` flag completely.
	IsSupervised *bool `json:"is_supervised,omitempty"`

	// A language designator is a code that represents a language.
	// Use the two-letter ISO 639-1 standard (preferred) or the three-letter ISO 639-2
	// standard. If an ISO 639-1 code is not available for a particular language, use
	// the ISO 639-2 code instead.
	// See [Language and Locale
	// IDs](https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html)
	// for more information.
	// Example two-letter: `en`, `fr`, `ja`
	// Example three-letter: `eng`, `fre`, `jpn`, `haw`
	// Available on tvOS and macOS 11 and later.
	Language *string `json:"language,omitempty"`

	// A string that uniquely identifies various services that are managed by a single
	// organization.
	OrgMagic string `json:"org_magic"`

	// A human-readable name for the profile.
	ProfileName *string `json:"profile_name,omitempty"`

	// ProfileUuid corresponds to the JSON schema field "profile_uuid".
	ProfileUuid *string `json:"profile_uuid,omitempty"`

	// A region designator is a code that represents a country. Available on tvOS and
	// macOS 11 and later.
	// Use the ISO 3166-1 standard, a two-letter, capitalized code.
	// Examples: US, GB, AU
	Region *string `json:"region,omitempty"`

	// A list of setup panes to skip. The list of valid strings is defined in
	// [SkipKeys](https://developer.apple.com/documentation/devicemanagement/skipkeys).
	SkipSetupItems []string `json:"skip_setup_items,omitempty"`

	// Each string contains a DER-encoded certificate converted to Base64 encoding. If
	// provided, the device will continue to pair with a host that possesses one of
	// these certificates even when `allow_pairing` is set to `false`. If
	// `is_supervised` is `false`, this list is unused.
	SupervisingHostCerts []string `json:"supervising_host_certs,omitempty"`

	// A support email address for the organization. This key is valid in
	// X-Server-Protocol-Version 2 and later.
	SupportEmailAddress *string `json:"support_email_address,omitempty"`

	// A support phone number for the organization.
	SupportPhoneNumber *string `json:"support_phone_number,omitempty"`

	// String. The URL of the MDM server.
	Url *string `json:"url,omitempty"`
}

// The request for assigning a profile to a set of devices.
type ProfileServiceRequestJson struct {
	// Array of strings that contains device serial numbers.
	Devices []string `json:"devices,omitempty"`

	// The unique identifier for a profile.
	ProfileUuid *string `json:"profile_uuid,omitempty"`
}

// Describes a beta enrollment token available for the given organization.
type SeedBuildTokenJson struct {
	// The platform related to beta build. Possible values are: homePodOS, iOS, OSX,
	// tvOS, visionOS, watchOS]
	Os *SeedBuildTokenJsonOs `json:"os,omitempty"`

	// The public facing name, like “iOS 17 Public Beta”.
	Title *string `json:"title,omitempty"`

	// The token to use when requesting the beta build.
	Token *string `json:"token,omitempty"`
}

type SeedBuildTokenJsonOs string

const SeedBuildTokenJsonOsHomePodOS SeedBuildTokenJsonOs = "homePodOS"
const SeedBuildTokenJsonOsIOS SeedBuildTokenJsonOs = "iOS"
const SeedBuildTokenJsonOsOSX SeedBuildTokenJsonOs = "OSX"
const SeedBuildTokenJsonOsTvOS SeedBuildTokenJsonOs = "tvOS"
const SeedBuildTokenJsonOsVisionOS SeedBuildTokenJsonOs = "visionOS"
const SeedBuildTokenJsonOsWatchOS SeedBuildTokenJsonOs = "watchOS"

// The request to sync the list of devices.
type SyncDeviceRequestJson struct {
	// A hex string that represents the starting position for a request. Use this to
	// retrieve the list of devices that have been added or removed since a previous
	// request. The string can be up to 1000 characters.
	Cursor string `json:"cursor"`

	// The maximum number of entries to return. Optional.
	Limit int `json:"limit,omitempty"`
}

// A URL object.
type UrlJson struct {
	// Possible values: GET, POST, PUT, DELETE
	HttpMethod []UrlJsonHttpMethodElem `json:"http_method,omitempty"`

	// The limit for the URL.
	Limit *LimitJson `json:"limit,omitempty"`

	// URI for the API.
	Uri *string `json:"uri,omitempty"`
}

type UrlJsonHttpMethodElem string

const UrlJsonHttpMethodElemDELETE UrlJsonHttpMethodElem = "DELETE"
const UrlJsonHttpMethodElemGET UrlJsonHttpMethodElem = "GET"
const UrlJsonHttpMethodElemPOST UrlJsonHttpMethodElem = "POST"
const UrlJsonHttpMethodElemPUT UrlJsonHttpMethodElem = "PUT"
