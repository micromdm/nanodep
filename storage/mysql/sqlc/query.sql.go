// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getConfigBaseURL = `-- name: GetConfigBaseURL :one
SELECT config_base_url FROM dep_names WHERE name = ?
`

func (q *Queries) GetConfigBaseURL(ctx context.Context, name string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getConfigBaseURL, name)
	var config_base_url sql.NullString
	err := row.Scan(&config_base_url)
	return config_base_url, err
}

const getKeypair = `-- name: GetKeypair :one
SELECT
  tokenpki_cert_pem,
  tokenpki_key_pem
FROM
  dep_names
WHERE
  name = ?
`

type GetKeypairRow struct {
	TokenpkiCertPem []byte
	TokenpkiKeyPem  []byte
}

func (q *Queries) GetKeypair(ctx context.Context, name string) (GetKeypairRow, error) {
	row := q.db.QueryRowContext(ctx, getKeypair, name)
	var i GetKeypairRow
	err := row.Scan(&i.TokenpkiCertPem, &i.TokenpkiKeyPem)
	return i, err
}

const getSyncerCursor = `-- name: GetSyncerCursor :one
SELECT syncer_cursor FROM dep_names WHERE name = ?
`

func (q *Queries) GetSyncerCursor(ctx context.Context, name string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getSyncerCursor, name)
	var syncer_cursor sql.NullString
	err := row.Scan(&syncer_cursor)
	return syncer_cursor, err
}
